import time                  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ time.sleep()
import threading             # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á thread ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
import msvcrt                # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡∏ö‡∏ô Windows
import matplotlib.pyplot as plt  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü/‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
import numpy as np           # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
from robomaster import robot # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå RoboMaster

# ===================== Plotting =====================
plt.ion()                    # ‡πÄ‡∏õ‡∏¥‡∏î interactive mode ‡∏Ç‡∏≠‡∏á matplotlib ‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
_fig, _ax = plt.subplots(figsize=(8, 8))  # ‡∏™‡∏£‡πâ‡∏≤‡∏á figure ‡πÅ‡∏•‡∏∞ axes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
CELL_SIZE = 0.6              # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà maze ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
def plot_maze(current_cell, visited, path_history, title="Real-time Maze Exploration"):
    ax = _ax              # ‡πÉ‡∏ä‡πâ axes ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
    ax.clear()             # ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà
    # ‡∏ß‡∏≤‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    for (x, y) in visited:
        ax.add_patch(plt.Rectangle((x - 0.5, y - 0.5), 1, 1,
                                   facecolor='lightgray', edgecolor='gray'))
    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏ô
    if len(path_history) > 1:
        path_x, path_y = zip(*path_history)   # ‡πÅ‡∏¢‡∏Å x, y
        ax.plot(path_x, path_y, 'b-o', markersize=4, label='Path')
    # ‡∏ß‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
    cx, cy = current_cell
    ax.plot(cx, cy, 'ro', markersize=12, label='Robot')
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    all_x = [c[0] for c in visited] or [0]
    all_y = [c[1] for c in visited] or [0]
    ax.set_xlim(min(all_x) - 1.5, max(all_x) + 1.5)
    ax.set_ylim(min(all_y) - 1.5, max(all_y) + 1.5)
    ax.set_aspect('equal', adjustable='box')  # ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡∏ô x,y ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    ax.grid(True)                             # ‡πÄ‡∏õ‡∏¥‡∏î grid
    ax.set_title(title)                        # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    ax.legend()                                # ‡πÅ‡∏™‡∏î‡∏á legend
    plt.pause(0.05)                            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå

# ‡∏õ‡∏¥‡∏î interactive mode ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
def finalize_plot():
    plt.ioff()
    plt.show()

# ===================== Globals =====================
tof_cm = 999.0             # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡∏ô‡πâ‡∏≤ (TOF sensor) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
ir_right_cm = 999.0        # ‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ (IR sensor) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
ir_left_cm = 999.0         # ‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ (IR sensor) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
last_value_right = 0.0     # ‡∏Ñ‡πà‡∏≤ IR ‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤
last_value_left = 0.0      # ‡∏Ñ‡πà‡∏≤ IR ‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤

sensor_lock = threading.Lock()  # ‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö access sensor variables
stop_event = threading.Event()  # event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°

# Thresholds ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
FRONT_WALL_THRESHOLD = 35.0   # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
SIDE_WALL_THRESHOLD = 30.0    # ‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏≤‡∏á
TARGET_WALL_DIST = 15.0       # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏ú‡∏ô‡∏±‡∏á
FORWARD_SPEED = 0.3           # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤
TURN_SPEED = 50               # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏°‡∏∏‡∏ô

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ ADC ‡∏Ç‡∏≠‡∏á IR ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£
CALIBRA_TABLE_IR_RIGHT = {615:5,605:10,415:15,335:20,275:25,255:30}
CALIBRA_TABLE_IR_LEFT = {680:5,420:10,300:15,235:20,210:25,175:30}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô low-pass filter ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì IR
def single_lowpass_filter(new_value, last_value, alpha=0.8):
    return alpha * new_value + (1-alpha) * last_value

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ ADC ‡πÄ‡∏õ‡πá‡∏ô cm ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ table
def adc_to_cm(adc_value, table):
    points = sorted(table.items(), key=lambda x: x[0], reverse=True)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥
    if adc_value >= points[0][0]: return float(points[0][1])         # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    if adc_value <= points[-1][0]: return float(points[-1][1])       # ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î
    for i in range(len(points)-1):
        x1,y1 = points[i]
        x2,y2 = points[i+1]
        if x2 <= adc_value <= x1:                                     # ‡∏´‡∏≤ segment
            return float(y1 + (adc_value-x1)*(y2-y1)/(x2-x1))        # linear interpolation
    return float("nan")                                               # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠

# ===================== MazeRunner =====================
class MazeRunner:
    def __init__(self, conn_type="ap"):
        print("üîå Connecting to robot...")
        self.ep_robot = robot.Robot()             # ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
        self.ep_robot.initialize(conn_type=conn_type)  # initialize ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
        self.ep_chassis = self.ep_robot.chassis   # chassis ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        self.ep_sensor = self.ep_robot.sensor     # sensor object
        self.ep_sensor_adaptor = self.ep_robot.sensor_adaptor  # adaptor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô ADC

        # Map tracking
        self.current_x_m = 0.0                      # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x ‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏°‡∏ï‡∏£)
        self.current_y_m = 0.0                      # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á y ‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏°‡∏ï‡∏£)
        self.visited_cells = set([(0,0)])           # ‡πÄ‡∏ã‡∏ï‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ
        self.path_history = [(0,0)]                 # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        print("‚úÖ Robot connected!")

        # Subscribe TOF sensor
        self.ep_sensor.sub_distance(freq=20, callback=self._tof_cb)

        # Start threads ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sensor ‡πÅ‡∏•‡∏∞ status
        threading.Thread(target=self._sensor_loop, daemon=True).start()
        threading.Thread(target=self._status_loop, daemon=True).start()

    # Callback TOF
    def _tof_cb(self, sub_info):
        global tof_cm
        with sensor_lock:
            tof_cm = sub_info[0]/10.0  # ‡πÅ‡∏õ‡∏•‡∏á mm -> cm

    # Loop ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ IR sensor
    def _sensor_loop(self):
        global ir_right_cm, ir_left_cm, last_value_right, last_value_left
        while not stop_event.is_set():
            ir_right_raw = self.ep_sensor_adaptor.get_adc(id=1, port=1)  # ‡∏≠‡πà‡∏≤‡∏ô IR ‡∏Ç‡∏ß‡∏≤
            ir_left_raw = self.ep_sensor_adaptor.get_adc(id=2, port=1)   # ‡∏≠‡πà‡∏≤‡∏ô IR ‡∏ã‡πâ‡∏≤‡∏¢
            ir_right_filtered = single_lowpass_filter(ir_right_raw, last_value_right)  # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤
            ir_left_filtered = single_lowpass_filter(ir_left_raw, last_value_left)
            last_value_right, last_value_left = ir_right_filtered, ir_left_filtered
            with sensor_lock:
                ir_right_cm = adc_to_cm(ir_right_filtered, CALIBRA_TABLE_IR_RIGHT)  # ‡πÅ‡∏õ‡∏•‡∏á cm
                ir_left_cm = adc_to_cm(ir_left_filtered, CALIBRA_TABLE_IR_LEFT)
            time.sleep(0.05)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á loop 50ms

    # Loop ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    def _status_loop(self):
        while not stop_event.is_set():
            with sensor_lock:
                t, r, l = tof_cm, ir_right_cm, ir_left_cm
            print(f"TOF:{t:5.1f} L:{l:5.1f} R:{r:5.1f} Pos:({self.current_x_m:5.2f},{self.current_y_m:5.2f}) \r", end="")
            time.sleep(0.1)

    # ===================== Movement =====================
    # ‡∏´‡∏°‡∏∏‡∏ô‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
    def turn(self, angle_deg):
        self.ep_chassis.move(x=0, y=0, z=-angle_deg, z_speed=TURN_SPEED).wait_for_completed()
        time.sleep(0.2)

    # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏ô‡∏±‡∏á‡∏ã‡πâ‡∏≤‡∏¢
    def follow_left_wall(self):
        with sensor_lock:
            l_dist, f_dist = ir_left_cm, tof_cm
        error = (l_dist - TARGET_WALL_DIST)/100.0          # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        turn_rate = max(min(20*error, 20), -20)            # ‡∏õ‡∏£‡∏±‡∏ö turn rate
        self.ep_chassis.drive_speed(x=FORWARD_SPEED, y=0, z=turn_rate, timeout=0.2)

    # ===================== Mapping =====================
    def update_map(self):
        grid_x = round(self.current_x_m / CELL_SIZE)       # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏°‡∏ï‡∏£ -> grid
        grid_y = round(self.current_y_m / CELL_SIZE)
        current_cell = (grid_x, grid_y)
        self.visited_cells.add(current_cell)               # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ
        if self.path_history[-1] != current_cell:
            self.path_history.append(current_cell)
        plot_maze(current_cell, self.visited_cells, self.path_history)

    # ===================== Maze Solving =====================
    def solve_maze(self):
        print("\n--- üèÅ Start Maze ---")
        try:
            while not stop_event.is_set():
                self.update_map()                           # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                with sensor_lock:
                    r_dist, f_dist = ir_right_cm, tof_cm
                    l_dist = ir_left_cm

                if r_dist > SIDE_WALL_THRESHOLD:           # ‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
                    print("üí° Right open -> turn right")
                    self.ep_chassis.move(x=0.2, y=0, z=0, xy_speed=0.5).wait_for_completed()
                    self.turn(90)
                elif f_dist < FRONT_WALL_THRESHOLD:        # ‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                    if l_dist > SIDE_WALL_THRESHOLD:      # ‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
                        print("üí° Left open -> turn left")
                        self.turn(-90)
                    else:                                 # ‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏î‡πâ‡∏≤‡∏ô
                        print("üõë Dead end -> turn 180")
                        self.ep_chassis.drive_speed(x=0, y=0, z=0, timeout=0.2)
                        time.sleep(0.3)
                        self.turn(180)
                else:
                    self.follow_left_wall()               # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ú‡∏ô‡∏±‡∏á‡∏ã‡πâ‡∏≤‡∏¢
                time.sleep(0.05)
        except KeyboardInterrupt:
            print("\nKeyboardInterrupt received")
        finally:
            self.stop_all()

    # ===================== Stop Robot =====================
    def stop_all(self):
        stop_event.set()                                    # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î
        self.ep_chassis.drive_speed(x=0, y=0, z=0, timeout=0.1)
        try: self.ep_sensor.unsub_distance()               # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å subscription TOF
        except: pass
        self.ep_robot.close()                               # ‡∏õ‡∏¥‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
        finalize_plot()                                    # ‡πÅ‡∏™‡∏î‡∏á plot ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        print("Stopped.")

# ===================== Main =====================
if __name__ == "__main__":
    runner = None
    try:
        runner = MazeRunner(conn_type="ap")               # ‡∏™‡∏£‡πâ‡∏≤‡∏á MazeRunner

        # Thread ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ESC key
        def check_exit():
            while not stop_event.is_set():
                if msvcrt.kbhit() and msvcrt.getch() == b'\x1b':
                    print("\n[INFO] ESC pressed -> stopping")
                    stop_event.set()
                    break
                time.sleep(0.1)

        threading.Thread(target=check_exit, daemon=True).start()
        runner.solve_maze()                               # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ Maze
    except Exception as e:
        print(f"\n--- Error: {e} ---")
        import traceback
        traceback.print_exc()
    finally:
        if runner:
            runner.stop_all()                              # ‡∏õ‡∏¥‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞ plot
